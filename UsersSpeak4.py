import asyncio
import random
import re
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.functions.messages import SetTypingRequest, SendReactionRequest
from telethon.tl.types import SendMessageTypingAction, ReactionEmoji
from openai import AsyncOpenAI
from decouple import config

# ‚úÖ OpenAI API
OPENAI_API_KEY = config("AI_API_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ ID –≥—Ä—É–ø–ø—ã –∏ OWNER_ID
GROUP_ID = config("GROUP_ID", cast=int)
OWNER_ID = config("OWNER_ID", cast=int)

# ‚úÖ –ß–∞—Ç ID –±–æ—Ç–æ–≤
CHAT_ID_BOT1 = config("CHAT_ID_BOT1", cast=int)
CHAT_ID_BOT2 = config("CHAT_ID_BOT2", cast=int)

# ‚úÖ –î–∞–Ω–Ω—ã–µ —é–∑–µ—Ä-–±–æ—Ç–æ–≤
sessions = [
    {
        "phone": config("BOT1_PHONE"),
        "api_id": config("BOT1_API_ID", cast=int),
        "api_hash": config("BOT1_API_HASH"),
        "session": config("BOT1_SESSION"),
        "chat_id": CHAT_ID_BOT1
    },
    {
        "phone": config("BOT2_PHONE"),
        "api_id": config("BOT2_API_ID", cast=int),
        "api_hash": config("BOT2_API_HASH"),
        "session": config("BOT2_SESSION"),
        "chat_id": CHAT_ID_BOT2
    }
]

# ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
bot_profiles = {
    CHAT_ID_BOT1: "–¢—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –î–∞—Ä—Ç–∞ –í–µ–π–¥–µ—Ä–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –ª–æ—Ä–¥ —Å–∏—Ç—Ö–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—ë–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–∏–ª—ã.",
    CHAT_ID_BOT2: "–¢—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –õ—é–∫–∞ –°–∫–∞–π—É–æ–∫–µ—Ä–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥–∂–µ–¥–∞–π, –≤–µ–¥—É—â–∏–π –±–æ—Ä—å–±—É –ø—Ä–æ—Ç–∏–≤ –ò–º–ø–µ—Ä–∏–∏."
}

# ‚úÖ –û–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
group_prompt = "–≠—Ç–æ —á–∞—Ç –æ –ó–≤—ë–∑–¥–Ω—ã—Ö –≤–æ–π–Ω–∞—Ö. –ë–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –ª—é–¥–∏. –ü–∏—Å–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ 2-—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\
–ù–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç –ª–∏ —Ç—ã —É—Ö–æ–¥–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞"

# ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å
# def is_question(text):
#     return bool(re.search(r"\b(–∑–∞—á–µ–º|–∫–∞–∫|–ø–æ—á–µ–º—É|—á—Ç–æ|–∫—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|—Å–∫–æ–ª—å–∫–æ|–º–æ–∂–Ω–æ –ª–∏|\?)\b", text, re.IGNORECASE))

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
async def generate_message(prompt):
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... (–æ—à–∏–±–∫–∞ AI)"

# ‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
async def send_typing_action(client, chat_id, duration=3):
    try:
        await client(SetTypingRequest(chat_id, SendMessageTypingAction()))
        await asyncio.sleep(duration)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ SetTypingRequest: {e}")


# ‚úÖ –õ–∞–π–∫–∏ (—Ä–µ–∞–∫—Ü–∏–∏) –æ—Ç –±–æ—Ç–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 6% —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
async def send_reaction(client, event):
    if random.random() < 0.06:  # 6% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
        await asyncio.sleep(random.randint(20, 120))  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 3-10 —Å–µ–∫—É–Ω–¥
        try:
            reaction_choices = ["üëç", "‚ù§Ô∏è", "üî•", "üíØ"]
            chosen_reaction = random.choice(reaction_choices)
            await client(SendReactionRequest(
                peer=event.chat_id,
                msg_id=event.id,
                reaction=[ReactionEmoji(emoticon=chosen_reaction)]
            ))
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")


# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot(user, all_clients, reply_counter, dialog_started):
    client = TelegramClient(StringSession(user["session"]), user["api_id"], user["api_hash"])
    await client.start()
    print(f"‚úÖ –ë–æ—Ç {user['phone']} –ø–æ–¥–∫–ª—é—á–µ–Ω!")

    bot_prompt = bot_profiles[user["chat_id"]]

    @client.on(events.NewMessage(chats=GROUP_ID))
    async def handler(event):
        if event.out:
            return  # –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–∞–º —Å–µ–±–µ

        sender_id = event.sender_id
        message_text = event.text.strip()

        # ‚úÖ –ü–û–ú–ï–ß–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–û–ï
        await client.send_read_acknowledge(event.chat_id, max_id=event.id)

        # ‚úÖ –ï—Å–ª–∏ –ø–∏—à–µ—Ç OWNER_ID, –±–æ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –±–µ—Å–µ–¥—É
        if sender_id == OWNER_ID and not dialog_started[0]:
            dialog_started[0] = True
            await send_typing_action(client, event.chat_id, duration=random.randint(10, 60))
            response_prompt = f"{group_prompt}\n{bot_prompt}\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏ –±–µ—Å–µ–¥—É."
            message = await generate_message(response_prompt)
            await client.send_message(GROUP_ID, message)

        # ‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–ª–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ —Ä–µ–ø–ª–∞–∏, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –µ–º—É)
        if dialog_started[0] and event.is_reply:
            replied_message = await event.get_reply_message()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É reply, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–ª–∞–π
            while replied_message and replied_message.is_reply:
                replied_message = await replied_message.get_reply_message()

            replied_sender_id = replied_message.sender_id if replied_message else None

            # ‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–ø–ª–∞–π –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –µ–º—É
            if replied_sender_id == user["chat_id"]:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –Ω–æ–≤—ã–π reply –Ω–∞ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞, –±–æ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç
                if event.id not in reply_counter:
                    reply_counter[event.id] = 1  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–ø–ª–∞–π –±–æ—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª

                    await send_typing_action(client, event.chat_id, duration=random.randint(10, 60))

                    # –í—Å–µ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    response_prompt = f"{group_prompt}\n{bot_prompt}\n–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: \"{replied_message.text}\"\n\
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{message_text}\". –û—Ç–≤–µ—Ç—å –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."

                    message = await generate_message(response_prompt)
                    await event.reply(message)

        # ‚úÖ –ï—Å–ª–∏ –æ–¥–∏–Ω –±–æ—Ç –Ω–∞–ø–∏—Å–∞–ª, –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—á–∞–µ—Ç (–ù–û –ù–ï –°–ê–ú –°–ï–ë–ï)
        elif dialog_started[0] and sender_id in [bot["chat_id"] for bot in sessions if bot["chat_id"] != user["chat_id"]]:
            await asyncio.sleep(random.randint(10, 60))
            await send_typing_action(client, event.chat_id, duration=random.randint(10, 60))
            follow_up_prompt = f"{group_prompt}\n{bot_prompt}\n–ü—Ä–æ–¥–æ–ª–∂–∏ –±–µ—Å–µ–¥—É."
            follow_up_message = await generate_message(follow_up_prompt)
            await client.send_message(GROUP_ID, follow_up_message)

        # ‚úÖ –õ–∞–π–∫ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
        await send_reaction(client, event)

    all_clients.append(client)
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    all_clients = []
    reply_counter = {}
    dialog_started = [False]
    tasks = [run_bot(user, all_clients, reply_counter, dialog_started) for user in sessions]
    await asyncio.gather(*tasks)

asyncio.run(main())
