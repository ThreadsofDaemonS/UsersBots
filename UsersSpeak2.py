import asyncio
import random
import re
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.functions.messages import SetTypingRequest, SendReactionRequest
from telethon.tl.types import SendMessageTypingAction, ReactionEmoji
from openai import AsyncOpenAI
from decouple import config

# ‚úÖ OpenAI API
OPENAI_API_KEY = config("AI_API_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ ID –≥—Ä—É–ø–ø—ã –∏ OWNER_ID
GROUP_ID = config("GROUP_ID", cast=int)
OWNER_ID = config("OWNER_ID", cast=int)

# ‚úÖ –î–∞–Ω–Ω—ã–µ —é–∑–µ—Ä-–±–æ—Ç–æ–≤
sessions = [
    {
        "phone": config("BOT1_PHONE"),
        "api_id": config("BOT1_API_ID", cast=int),
        "api_hash": config("BOT1_API_HASH"),
        "session": config("BOT1_SESSION")
    },
    {
        "phone": config("BOT2_PHONE"),
        "api_id": config("BOT2_API_ID", cast=int),
        "api_hash": config("BOT2_API_HASH"),
        "session": config("BOT2_SESSION")
    }
]

# ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
bot_profiles = {
    config("BOT1_PHONE"): "–¢—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –î–∞—Ä—Ç–∞ –í–µ–π–¥–µ—Ä–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –ª–æ—Ä–¥ —Å–∏—Ç—Ö–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—ë–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–∏–ª—ã.",
    config("BOT2_PHONE"): "–¢—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –õ—é–∫–∞ –°–∫–∞–π—É–æ–∫–µ—Ä–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥–∂–µ–¥–∞–π, –≤–µ–¥—É—â–∏–π –±–æ—Ä—å–±—É –ø—Ä–æ—Ç–∏–≤ –ò–º–ø–µ—Ä–∏–∏."
}

# ‚úÖ –û–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
group_prompt = "–≠—Ç–æ —á–∞—Ç –æ –ó–≤—ë–∑–¥–Ω—ã—Ö –≤–æ–π–Ω–∞—Ö. –ë–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥."

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
async def generate_message(prompt):
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... (–æ—à–∏–±–∫–∞ AI)"

# ‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
async def send_typing_action(client, chat_id, duration=3):
    try:
        await client(SetTypingRequest(chat_id, SendMessageTypingAction()))
        await asyncio.sleep(duration)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ SetTypingRequest: {e}")

# ‚úÖ –õ–∞–π–∫–∏ (—Ä–µ–∞–∫—Ü–∏–∏) –æ—Ç –±–æ—Ç–æ–≤
async def send_reaction(client, event):
    try:
        reaction_choices = ["üëç", "‚ù§Ô∏è", "üî•", "üíØ"]
        chosen_reaction = random.choice(reaction_choices)
        await client(SendReactionRequest(
            peer=event.chat_id,
            msg_id=event.id,
            reaction=[ReactionEmoji(emoticon=chosen_reaction)]
        ))
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot(user, all_clients):
    client = TelegramClient(StringSession(user["session"]), user["api_id"], user["api_hash"])
    await client.start()
    print(f"‚úÖ –ë–æ—Ç {user['phone']} –ø–æ–¥–∫–ª—é—á–µ–Ω!")

    bot_prompt = bot_profiles[user["phone"]]

    @client.on(events.NewMessage(chats=GROUP_ID))
    async def handler(event):
        if event.out:
            return  # –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–∞–º —Å–µ–±–µ

        sender = await event.get_sender()
        sender_id = event.sender_id
        message_text = event.text.strip()

        # ‚úÖ –ï—Å–ª–∏ –ø–∏—à–µ—Ç OWNER_ID, –±–æ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –±–µ—Å–µ–¥—É
        if sender_id == OWNER_ID:
            first_bot, second_bot = sessions  # –ß—ë—Ç–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
            if user["phone"] == first_bot["phone"]:
                await send_typing_action(client, event.chat_id, duration=random.randint(5, 10))
                response_prompt = f"{group_prompt}\n{bot_prompt}\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏ –±–µ—Å–µ–¥—É."
                message = await generate_message(response_prompt)
                await client.send_message(GROUP_ID, message)

                # ‚úÖ –í—Ç–æ—Ä–æ–π –±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç
                await asyncio.sleep(random.randint(10, 30))
                second_client = all_clients[1] if all_clients[0] == client else all_clients[0]
                await send_typing_action(second_client, event.chat_id, duration=random.randint(5, 10))
                follow_up_prompt = f"{group_prompt}\n{bot_profiles[second_bot['phone']]}\n–ü—Ä–æ–¥–æ–ª–∂–∏ –±–µ—Å–µ–¥—É."
                follow_up_message = await generate_message(follow_up_prompt)
                await second_client.send_message(GROUP_ID, follow_up_message)

        # ‚úÖ –ï—Å–ª–∏ –æ–¥–∏–Ω –±–æ—Ç –Ω–∞–ø–∏—Å–∞–ª, –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—á–∞–µ—Ç
        elif sender_id in [bot["api_id"] for bot in sessions if bot["phone"] != user["phone"]]:
            await asyncio.sleep(random.randint(30, 60))
            await send_typing_action(client, event.chat_id, duration=random.randint(5, 10))
            follow_up_prompt = f"{group_prompt}\n{bot_prompt}\n–ü—Ä–æ–¥–æ–ª–∂–∏ –±–µ—Å–µ–¥—É."
            follow_up_message = await generate_message(follow_up_prompt)
            await client.send_message(GROUP_ID, follow_up_message)

        # ‚úÖ –õ–∞–π–∫ + —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_reaction(client, event)
        await asyncio.sleep(random.randint(10, 30))  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        await send_typing_action(client, event.chat_id, duration=random.randint(5, 10))
        comment_prompt = f"{group_prompt}\n{bot_prompt}\n–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
        comment_message = await generate_message(comment_prompt)
        await client.send_message(GROUP_ID, comment_message)

    all_clients.append(client)
    await client.run_until_disconnected()

# ‚úÖ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
async def main():
    all_clients = []
    tasks = [run_bot(user, all_clients) for user in sessions]
    await asyncio.gather(*tasks)

asyncio.run(main())
